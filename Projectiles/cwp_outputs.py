'''
This module handles the GUI for the outputs over time of the Collisions with a particle and a wall
question type
Does not incorporate any other written modules as it is a terminating GUI and does not lead to any
other GUIs
'''
import tkinter as tk


def run_cwp_outputs():
    class Projectiles_Variable_Outputs_GUI:
        """
        This class is used for the actual display of the outputs of the collision with particle and
        wall question type. It takes in 2 lists and will loop through these lists displaying each item
        inside the lists at 0.01s intervals
        Parameters
        ----------

        Attributes
        ----------
        root - This is the root of the window and allows tkinter to display the GUI and run a main
        loop through it
        particle_vel_list - This is a list of velocities of the particles which is generated by the simulation module
        time_list - This is a list of times at 0.01s intervals and is generated in this module

        Methods
        -------
        update_label - The method which updates the text labels every 0.01s as long as the index pointer is in range
        of the length of the shortest list generated
        close_gui - The method which destroys the root and thus closes the GUI - designed to mean that this module can
        be reused in the same instance of the progam, and it will start from the beginning of the lists when run each time
        """
        def __init__(self, root, particle_vel_list, time_list):
            """
            Define the root of the tkinter window and the lists of the velocities and times
            that are going to be displayed
            Parameters
            ----------
            root
            particle_vel_list
            time_list
            """
            self.root = root
            self.root.title("Collisions particle and wall outputs")
            self.root.geometry("500x400")
            # Lists of values to display
            self.particle_vel_list = particle_vel_list
            self.time_list = time_list
            self.current_index = 0

            # Create a label and pack it
            self.time_label = tk.Label(root, text="", font=("Helvetica", 14))
            self.time_label.pack(pady=10)
            self.particle_vel_label = tk.Label(root, text="", font=("Helvetica", 14))
            self.particle_vel_label.pack(pady=10)

            # Create a button to close the GUI
            self.close_button = tk.Button(root, text="Close", command=self.close_gui)
            self.close_button.pack(pady=10)

            # Call the update_label method every 10 milliseconds (0.01 seconds)
            self.root.after(10, self.update_label)


        def update_label(self):
            """
            Update the displayed label on the output GUI with the next item in the list, keeping track
            of this using an index counter
            """
            # Get the current value from the list
            current_particle_vel = self.particle_vel_list[self.current_index]
            current_time = self.time_list[self.current_index]


            # Update the label with the current value
            time_display = f'Time: {str(current_time)[0:4]}'
            particle_vel_display = f' Particle Velocity: {str(current_particle_vel)[0:5]}'
            self.time_label.config(text=time_display)
            self.particle_vel_label.config(text=particle_vel_display)

            # Move to the next value in the list
            self.current_index = self.current_index + 1

            # Call the update_label method again after 1000 milliseconds (1 second)
            if self.current_index < len(self.time_list) and self.current_index < len(
                    self.particle_vel_list):
                self.root.after(10, self.update_label)
            else:
                pass

        def close_gui(self):
            """
            The functino for the 'Close' button which destroys the root of the window
            """
            self.root.destroy()

    with open('CWPVars.txt', "r") as file:
        # Read each line and assign values to variables
        user_mass_particle = float(file.readline().strip())
        user_vel_particle = float(file.readline().strip())
        user_coefficient_of_restitution = float(file.readline().strip())
        user_end_time = float(file.readline().strip())

    # Generate lists of times and velocities by reading the files for velocities
    times_list = []
    ct = 0
    particle_vel_list = []

    for _ in range(100 * int(user_end_time)):
        times_list.append(ct)
        ct += 0.01
    with open('CWP_vels.txt', 'r') as f:
        lines = f.readlines()
    for l in lines:
        particle_vel_list.append(float(l.strip()))

    # Instasiate root and app nad run the main loop of the root
    root = tk.Tk()
    app = Projectiles_Variable_Outputs_GUI(root, particle_vel_list,times_list)
    root.mainloop()



