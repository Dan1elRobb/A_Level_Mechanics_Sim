"""
This module is used to display the graphs associated with the Projectiles question type
"""
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import tkinter as tk
import math


def projectiles_graphs():
    """
    This function is used so this graphs module can be run from another module with ease
    """
    matplotlib.use('TkAgg')
    from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

    def calc_variables_over_time(angle, end_time, initial_vel, initial_height):
        """
        This function takes in the variables provided by the user and uses kinematics equations to calculate the needed
        outputs at 0.01s intervals. Puts outputs in lists
        Parameters
        ----------
        angle - angle of projection of the particle (provided by the user)
        end_time - duration of simulation (provided by the user)
        initial_vel - initial velocity of the particle (provided by the user)
        initial_height - initial height of the particle (provided by the user)

        Returns
        -------
        2d array - [time_list, y_dis_list, x_dis_list, y_vel_list]
        """
        t = 0
        time_list = []
        y_dis_list = []
        x_dis_list = []
        y_vel_list = []
        while t < end_time:
            y_s = initial_vel * math.sin(math.radians(angle)) * t - 4.9 * t ** 2 + initial_height
            x_s = initial_vel * math.cos(math.radians(angle)) * t
            y_vel = initial_vel * math.sin(math.radians(angle)) - 9.8 * t
            y_dis_list.append(abs(y_s))
            x_dis_list.append(x_s)
            y_vel_list.append(y_vel)
            time_list.append(t)
            t += 0.01
        return time_list, y_dis_list, x_dis_list, y_vel_list

    def find_index_of_second_zero_displacement(dis_list):
        """
        This function takes a list of displacements (generated by calc_variables_over_time function)
         and finds the index of the second displacement under 10m - this is used to display the
         correct portion of the height vs time graph
        Parameters
        ----------
        dis_list

        Returns
        -------
        a[1] - the index of the second value in the given list that is less than 1 (as the dis_list is
         displacements over time at 0.01s intervals for larger initial velocities there may not be a
         displacement that is equal to 0 so having it return the second index under 10 will get the
         correct index for the graphs for both small and large initial velocities)

        """
        a = [i for i, n in enumerate(dis_list) if n < 1]
        return a[1]
    # Open and read the text file containing the user inputted variables
    with open('PVars.txt', "r") as file:
        # Read each line and assign values to variables
        angle = float(file.readline().strip())
        mass = float(file.readline().strip())
        initial_vel = float(file.readline().strip())
        starting_height = float(file.readline().strip())
        end_time = float(file.readline().strip())
    # Generate a list of lists of the variables at 0.01s intervals
    list_of_variables = calc_variables_over_time(angle, end_time, initial_vel, starting_height)

    class GraphsApp(tk.Tk):
        """
        This class is responsible for the main window of the graphs display - all graphs that will be displayed
         can be stuck on to this window
        """
        def __init__(self):
            super().__init__()
            self.title('Projectile Motion Graphs')

            y_dis_graph_page = YDisplacementTimeGraphFrame(self, "Height vs Time")
            x_dis_graph_page = XDisplacementTimeGraphFrame(self, "Horizontal Displacement vs Time")
            y_vel_graph_page = YVelocityTimeGraphFrame(self, "Y Velocity vs Time")

            y_dis_graph_page.pack(side=tk.TOP, pady=10)
            x_dis_graph_page.pack(side=tk.LEFT, padx=10)
            y_vel_graph_page.pack(side=tk.RIGHT, padx=10)

    class YDisplacementTimeGraphFrame(tk.Frame):
        """
        This class is responsible for the creation of the frame which will display the height vs time
        graph and be stuck onto the main application
        """
        def __init__(self, master, title):
            """
            Constructor of the class which defines the master of the frame and the title for the graph
            Parameters
            ----------
            master
            title
            """
            super().__init__(master)
            self.title = title
            self.create_graph()

        def create_graph(self):
            """
            This method uses the matplotlib library to create the graphs based on lists of variable generated
            """
            fig = plt.figure(figsize=(8, 4))
            ax = plt.axes()
            # Avoid index errors with the graphing
            try:
                ax.plot(list_of_variables[0][:find_index_of_second_zero_displacement(list_of_variables[1]) + 10],
                        list_of_variables[1][:find_index_of_second_zero_displacement(list_of_variables[1]) + 10])
                plt.xticks(np.arange(0, max(list_of_variables[0][:find_index_of_second_zero_displacement(
                    list_of_variables[1])]) + 0.5, 0.5))
                plt.yticks(np.arange(0, max(list_of_variables[1][:find_index_of_second_zero_displacement(
                    list_of_variables[1])]) + 0.5, 2.5))
            except IndexError:
                ax.plot(list_of_variables[0],
                        list_of_variables[1])
                plt.xticks(np.arange(0, max(list_of_variables[0])))
                plt.yticks(np.arange(0, max(list_of_variables[1])))

            try:
                plt.xlim(0, max(list_of_variables[0][
                                :find_index_of_second_zero_displacement(list_of_variables[1]) + 10]))
                plt.ylim(0, max(list_of_variables[1][
                                :find_index_of_second_zero_displacement(list_of_variables[1]) + 40]))
            except IndexError:
                plt.xlim(0,max(list_of_variables[0]))
                plt.ylim(0,max(list_of_variables[1]))
            # Customise the graph
            plt.grid()
            plt.title(self.title)
            ax.axhline()
            ax.axvline()
            canvas = FigureCanvasTkAgg(fig, master=self)
            canvas.draw()
            canvas.get_tk_widget().pack()

    class YVelocityTimeGraphFrame(tk.Frame):
        """
        This class is responsible for the creation of the frame which will display the vertical component of velocity
         vs time graph and be stuck onto the main application
        """
        def __init__(self, master, title):
            """
            Constructor of the class which defines the master of the frame and the title for the graph
            Parameters
            ----------
            master
            title
            """
            super().__init__(master)
            self.title = title
            self.create_graph()

        def create_graph(self):
            """
            This method uses the matplotlib library to create the graphs based on lists of variable generated
            """
            fig = plt.figure(figsize=(8, 4))
            ax = plt.axes()
            ax.plot(list_of_variables[0], list_of_variables[3])
            plt.xticks(np.arange(0, max(list_of_variables[0]) + 0.5, 0.5))
            plt.yticks(
                np.arange(min(list_of_variables[3]), max(list_of_variables[3]),
                          5))
            plt.xlim(0, max(list_of_variables[0]))
            plt.ylim(min(list_of_variables[3]), max(list_of_variables[3]))
            plt.grid()
            plt.title(self.title)
            ax.axhline().set_color('black')
            ax.axvline()
            canvas = FigureCanvasTkAgg(fig, master=self)
            canvas.draw()
            canvas.get_tk_widget().pack()

    class XDisplacementTimeGraphFrame(tk.Frame):
        """
        This class is responsible for the creation of the frame which will display the horizontal displacement
         vs time graph and be stuck onto the main application
        """
        def __init__(self, master, title):
            """
            Constructor of the class which defines the master of the frame and the title for the graph
            Parameters
            ----------
            master
            title
            """
            super().__init__(master)
            self.title = title
            self.create_graph()

        def create_graph(self):
            """
            This method uses the matplotlib library to create the graphs based on lists of variable generated
            """
            fig = plt.figure(figsize=(8, 4))
            ax = plt.axes()
            ax.plot(list_of_variables[0], list_of_variables[2])
            plt.xticks(np.arange(0, max(list_of_variables[0]) + 0.5, 0.5))
            plt.yticks(
                np.arange(0, max(list_of_variables[2]),
                          20))
            plt.xlim(0, max(list_of_variables[0]))
            plt.ylim(0, max(list_of_variables[2]))
            plt.grid()
            plt.title(self.title)
            ax.axhline().set_color('black')
            ax.axvline()
            canvas = FigureCanvasTkAgg(fig, master=self)
            canvas.draw()
            canvas.get_tk_widget().pack()
    # Instantiate the app and run the main loop
    app = GraphsApp()
    app.mainloop()

